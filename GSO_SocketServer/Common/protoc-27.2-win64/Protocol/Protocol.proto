syntax = "proto3";

package Protocol;

option csharp_namespace = "Google.Protobuf.Protocol";


//--------------- ENUM --------------------
enum MsgId{
  S_ENTER_GAME = 0;
  S_LEAVE_GAME = 1;
  S_SPAWN = 2;
  S_DESPAWN = 3;
  S_MOVE = 4;
  C_MOVE = 5;
  S_CONNECTED = 6; 
  S_CHANGE_HP = 7;
  S_DIE = 8;
  C_ENTER_GAME = 9; // (인게임)1명 입장 패킷

  C_LOAD_INVENTORY = 10;
  S_LOAD_INVENTORY = 11;
  C_CLOSE_INVENTORY = 13;
  S_CLOSE_INVENTORY = 14;
  C_MERGE_ITEM = 15;
  S_MERGE_ITEM = 16;
  C_DEVIDE_ITEM = 17;
  S_DEVIDE_ITEM = 18;
  C_MOVE_ITEM = 19;
  S_MOVE_ITEM = 20;
  C_DELETE_ITEM = 21; 
  S_DELETE_ITEM = 22; 
  C_SEARCH_ITEM = 23;
  S_SEARCH_ITEM = 24;

  C_RAYCAST_SHOOT = 25;
  S_RAYCAST_SHOOT = 26;
  S_EXIT_GAME = 27;
  C_EXIT_GAME = 28;

  C_JOIN_SERVER = 29; //접속 요청
  S_JOIN_SERVER = 30; // 접속 응답
  S_GAME_START = 31;  //32  모두 모임
  S_WAITING_STATUS = 32; //사람이 아직 안모임

  C_CHANGE_APPEARANCE = 33;
  S_CHANGE_APPEARANCE = 34;

  C_INPUT_DATA = 35;
}

enum GameObjectType{
    NONEOBJECT = 0;
    PLAYER = 1;
    MONSTER = 2;
    PROJECTILE = 3;
    INVENDATA = 4;
    BOX = 5;
    ITEM = 6;
    EXITZONE = 7;
    SPAWNZONE = 8;
}

enum ShapeType
    {
        SHAPE = 0;
        CIRCLE = 1;
        RECTANGLE = 2;
        POLYGON = 3;
        ARCPOLY = 4;
    }


enum ItemType{
    WEAPON= 0;
    DEFENSIVE= 1;
    BAG = 2;
    RECOVERY= 3;
    BULLET= 4;
    SPOIL= 5;
}

enum PE_GearPart{
  NONE          = 0;
  MainWeapon    = 1;
  SubWeapon     = 2;
  Armor         = 3;
  Backpack      = 4;
  PocketFirst   = 5;
  PocketSecond  = 6;
  PocketThird   = 7;
}

/*
enum CreatureState{
  IDLE = 0;
  MOVING = 1;
  SKILL = 2;
  DEAD = 3;
}*/

//--------------- END ENUM --------------------

//--------------- message --------------------



message S_EnterGame{                       //0  1명 게임 접속 패킷
    ObjectInfo player = 1;
    repeated PS_ItemInfo itemInfos = 2;
    repeated PS_GearInfo gearInfos = 3;
}

message S_LeaveGame{                       //1
  
}


message S_Spawn{                               //2
  repeated ObjectInfo objects = 1;
}


message S_Despawn{                            //3
  repeated int32 objcetIds = 1;
}

message S_Move{                              //4
  int32 objectId = 1;
  PositionInfo positionInfo = 2;
}


message C_Move{                               //5
  PositionInfo positionInfo = 1;
}

message S_Connected{                         //6 

}

message S_ChangeHp{                           //7
	int32 objectId = 1;
	int32 hp = 2;
    //CreatureState state = 3; //
}

message S_Die{                                //8
  int32 objectId = 1;
  int32 attackerId = 2;
}

message C_EnterGame{                       //9  (인게임)입장 요청
    CredentiaInfo credential = 1;
}



////////////////////////////////////////////
//                                        //
//               INVENTORY                //
//                                        //
////////////////////////////////////////////

message C_LoadInventory{                    //I1
    int32 sourceObjectId            = 1;    // 출발지 저장소(인벤토리 or 상자) 아이디 (자신일 경우 0)
}

message S_LoadInventory                     //I2
{                        
    bool isSuccess                  = 1;    // 성공 유무

    int32 sourceObjectId            = 2;    // 출발지 저장소 아이디
    repeated PS_ItemInfo itemInfos  = 3;    // 저장소에 있는 아이템들
    repeated PS_GearInfo gearInfos  = 4;    // 장비에 있는 아이템들
}

message C_CloseInventory{                   //I3
    int32 sourceObjectId            = 1;    // 출발지 저장소(상자) 아이디
}

message S_CloseInventory                    //I4
{                        
    bool isSuccess                  = 1;    // 성공 유무

    int32 sourceObjectId            = 2;    // 출발지 저장소 아이디
}

message C_SearchItem{                  //I5
    int32 sourceObjectId            = 1;    // 출발지 저장소(인벤, 상자) 아이디
    int32 sourceItemId              = 2;    // 서칭하는 아이템 아이디
}

message S_SearchItem                   //I6
{                        
    bool isSuccess                  = 1;    // 성공 유무

    int32 sourceObjectId            = 2;    // 출발지 저장소(인벤, 상자) 아이디
    PS_ItemInfo sourceItem          = 3;    // 서칭된 아이템 정보
}

message C_MergeItem                         //I7
{
    int32 sourceObjectId            = 1;    // 출발지 저장소 아이디
    int32 destinationObjectId       = 2;    // 목적지 저장소 아이디

    int32 mergedObjectId            = 3;    // 합쳐지는 아이템 기준
    int32 combinedObjectId          = 4;    // 합치기위한 아이템
    int32 mergeNumber               = 5;    // 합쳐지는 숫자
}

message S_MergeItem                         //I8
{
    bool isSuccess                  = 1;    // 성공 유무

    int32 sourceObjectId            = 2;    // 출발지 저장소 아이디
    int32 destinationObjectId       = 3;    // 목적지 저장소 아이디

    PS_ItemInfo mergedItem          = 4;    // 합쳐지는 아이템 기준
    PS_ItemInfo combinedItem        = 5;    // 합치기위한 아이템
}

message C_DevideItem                        //I9
{
    int32 sourceObjectId            = 1;    // 출발지 저장소 아이디
    int32 destinationObjectId       = 2;    // 목적지 저장소 아이디

    int32 sourceItemId              = 3;    // 나눠지는 아이템 기준
    int32 destinationGridX          = 4;    // 나눠진 새로운 아이템의 위치X
    int32 destinationGridY          = 5;    // 나눠진 새로운 아이템의 위치Y
    int32 destinationRotation       = 6;    // 나눠진 새로운 아이템의 회전값
    int32 devideNumber              = 7;    // 나눠지는 숫자
}

message S_DevideItem                        //I10
{
    bool isSuccess                  = 1;    // 성공 유무

    int32 sourceObjectId            = 2;    // 출발지 저장소 아이디
    int32 destinationObjectId       = 3;    // 목적지 저장소 아이디

    PS_ItemInfo sourceItem          = 4;    // 나눠지는 아이템 기준
    PS_ItemInfo destinationItem     = 5;    // 나눠진 아이템
}

message C_MoveItem                          //I11
{
    int32 sourceObjectId            = 1;    // 출발지 저장소 아이디
    int32 destinationObjectId       = 2;    // 목적지 저장소 아이디

    int32 sourceMoveItemId          = 3;    // 옮긴 아이템의 데이터
    int32 destinationGridX          = 4;    // 인벤 위치X
    int32 destinationGridY          = 5;    // 인벤 위치Y
    int32 destinationRotation       = 6;    // 인벤 회전
}

message S_MoveItem                          //I12
{
    bool isSuccess                  = 1;    // 성공 유무

    int32 sourceObjectId            = 2;    // 출발지 저장소 아이디
    int32 destinationObjectId       = 3;    // 목적지 저장소 아이디

    PS_ItemInfo sourceMoveItem      = 4;    // 출발지 아이템의 데이터
    PS_ItemInfo destinationMoveItem = 5;    // 목적지 아이템의 데이터
}

message C_DeleteItem                        //I13
{                   
    int32 sourceObjectId            = 1;    // 출발지 저장소 아이디
    int32 deleteItemId              = 2;    // 지우려고 하는 아이템의 데이터
}

message S_DeleteItem                        //I14
{                  
    bool isSuccess                  = 1;    // 성공 유무

    int32 sourceObjectId            = 2;    // 출발지 저장소 아이디
    PS_ItemInfo deleteItem          = 3;    // 지운 아이템의 데이터
}

////////////////////////////////////////////
//                                        //
//                  Gear                  //
//                                        //
////////////////////////////////////////////

////////////////////////////////////////////
//                                        //
//                 ????                   //
//                                        //
////////////////////////////////////////////

message C_RaycastShoot{ //25
    float startPosX = 1;
    float startPosY = 2;
    float dirX = 3;
    float dirY = 4;
}


message S_RaycastShoot // 26
{
    int32 shootPlayerId = 1;
    int32 hitObjectId = 2;
    //Shape Collider;
    //GameObject hitObj;
    //float distance = 3;
    //Vector2 normal;
    float startPosX = 3;
    float startPosY = 4;
    float hitPointX = 5;
    float hitPointY = 6;
}



message S_ExitGame {  //18
  int32 playerId = 1;
  int32 exitId = 2;
}

message C_ExitGame{   //19
   int32 playerId = 1;
   int32 exitId = 2;
}

message C_JoinServer{   // 29  접속 요청  // 인벤토리
   string name = 1;
   CredentiaInfo credential = 2;

}


message  S_JoinServer{   //30 접속 응답
    bool connected = 1;
}  

message S_WaitingStatus {   //31 사람이 아직 안모임
    int32 currentPlayers = 1;  // 현재 대기 중인 플레이어 수
    int32 requiredPlayers = 2; // 게임 시작에 필요한 최소 인원
}

message S_GameStart {     //32  모두 모임
    int32 roomId = 1; // 게임이 시작된 방의 ID
    float startTime = 2;   // 게임 시작 시간

    repeated ObjectInfo objects = 3;
    repeated PS_GearInfo gearInfos = 5;
}


message C_ChangeAppearance{ // 33
    int32 objectId = 1;  // 패킷을 보낸 플레이어의 아이디
    int32 gunId = 2; //해당 총의 오브젝트 ID
}

message S_ChangeAppearance{ //34
    int32 objectId = 1;  // 패킷을 보낸 플레이어의 아이디
    int32 gunId = 2; //해당 총의 마스터ID
}

message C_InputData {  //35
    bool reload = 1;
    int32 item = 2;
}



////////////////////////////////////////////
//                                        //
//                COMMAND                 //
//                                        //
////////////////////////////////////////////

//--------------- END message --------------------

//--------------- INFO -------------------- 기생하는 친구들
message ObjectInfo{
    int32 ObjectId = 1;
    int32 ownerId = 2;
    int32 skillId = 3; //This object is PROJECTILE
    string name = 4;
    PositionInfo positionInfo = 5;
    StatInfo statInfo = 6;
    ShapeInfo shape = 7;
    BoxInfo box = 8;
    int32 uid = 9;
    //CreatureState state = 9;
}

message StatInfo{
  int32 class = 1;
  int32 hp = 2;
  int32 maxHp = 3;
  float attackRange = 4;
  float attackSpeed = 5;
}


message PositionInfo{
  int32 currentRoomId = 1;
  float dirX = 2;
  float dirY = 3;
  float posX = 4;
  float posY = 5;
  float rotZ = 6;
}

message BoxInfo
{
    int32 x = 1;
    int32 y = 2;
    float weight = 3;
}


// Caustion : must sync Collision.Shapes.Shape.ShapeType Enum
message ShapeInfo{
    ShapeType ShpapeType    = 1;
    float CenterPosX          = 2;
    float CenterPosY          = 3;
    float Roatation     = 4;
    float Radius        = 5;// circle;
    float Left           = 6;//Rectangle
    float Bottom          = 7;//Rectangle
    float Width         = 8;//Rectangle
    float Height        = 9;//
    
}


/*message  Vector2Info{
    float PosX          = 1;
    float PosY          = 2;
}*/

message PS_ItemAttributes
{
    int32       durability                  = 1;        // 방어구 내구도
    int32       loadedAmmo                  = 2;        // 장전된 총알 개수
}

message PS_ItemInfo{
    int32       objectId                    = 1;        // 해당 아이템의 고유한 아이디
    int32       itemId                      = 2;        // 아이템의 종류(해당 아이템을 DB에서 조회하기 위한 코드)
    int32       x                           = 3;        // 아이템의 그리드 안 좌표상의 X위치
    int32       y                           = 4;        // 아이템의 그리드 안 좌표상의 Y위치
    int32       rotate                      = 5;        // 아이템의 회전코드(rotate * 90)
    int32       amount                      = 6;        // 아이템의 개수(소모품만 64개까지)
    PS_ItemAttributes attributes            = 7;        // 아이템 속성
    bool        isSearched                  = 8;        // 플레이어가 해당 아이템을 조회하였는지
}

message PS_GearInfo{
    PE_GearPart part                        = 1;        // 장비 아이템 번호
    PS_ItemInfo item                        = 2;        // 아이템 정보
}


message CredentiaInfo{
    int32 uid = 1;
    string access_token = 2;
    int64 expires_in = 3;
    string scope = 4;
    string token_type = 5;
}


//--------------- END INFO ----------------
syntax = "proto3";

package Protocol;

option csharp_namespace = "Google.Protobuf.Protocol";


//--------------- ENUM --------------------
enum MsgId{
  S_ENTER_GAME = 0;
  S_LEAVE_GAME = 1;
  S_SPAWN = 2;
  S_DESPAWN = 3;
  S_MOVE = 4;
  C_MOVE = 5;
  S_CONNECTED = 6;
  S_CHANGE_HP = 7;
  S_DIE = 8;
  C_ENTER_GAME = 9;
  C_LOAD_INVENTORY = 10;
  S_LOAD_INVENTORY = 11;
  C_MOVE_ITEM = 12;
  S_MOVE_ITEM = 13;
  C_DELETE_ITEM = 14; 
  S_DELETE_ITEM = 15; 
  C_RAYCAST_SHOOT = 16;
  S_RAYCAST_HIT = 17;
  S_EXIT_GAME =18;
  C_EXIT_GAME =19;


}

enum GameObjectType{
    NONEOBJECT = 0;
    PLAYER = 1;
    MONSTER = 2;
    PROJECTILE = 3;
    INVENDATA = 4;
    BOX = 5;
    ITEM = 6;
    EXITZONE = 7;
}

enum ShapeType
    {
        SHAPE = 0;
        CIRCLE = 1;
        RECTANGLE = 2;
        POLYGON = 3;
        ARCPOLY = 4;
    }


enum ItemType{
    WEAPON= 0;
    DEFENSIVE= 1;
    BAG = 2;
    RECOVERY= 3;
    BULLET= 4;
    SPOIL= 5;
}

/*
enum CreatureState{
  IDLE = 0;
  MOVING = 1;
  SKILL = 2;
  DEAD = 3;
}*/

//--------------- END ENUM --------------------

//--------------- message --------------------
message C_EnterGame{                                //9
    string name = 1;
}

message S_EnterGame{                       //0
    ObjectInfo player = 1;
    repeated PS_ItemInfo itemInfos = 2;
}

message S_LeaveGame{                       //1
  
}


message S_Spawn{                               //2
  repeated ObjectInfo objects = 1;
}


message S_Despawn{                            //3
  repeated int32 objcetIds = 1;
}

message S_Move{                              //4
  int32 objectId = 1;
  PositionInfo positionInfo = 2;
}


message C_Move{                               //5
  PositionInfo positionInfo = 1;
}
message S_Connected{                         //6 

}

message S_ChangeHp{                           //7
	int32 objectId = 1;
	int32 hp = 2;
    //CreatureState state = 3; //
}

message S_Die{                                //8
  int32 objectId = 1;
  int32 attackerId = 2;
}



////////////////////////////////////////////
//                                        //
//               INVENTORY                //
//                                        //
////////////////////////////////////////////

message C_LoadInventory{                        //10

}

message S_LoadInventory{                        //11
    repeated PS_ItemInfo itemInfos = 1;
}

message C_MergeItem                              //12
{
    int32 mergedObjectId    = 1;    // 합쳐지는 아이템 기준
    int32 combinedObjectId  = 2;    // 합치기위한 아이템
    int32 mergeNumber       = 3;    // 합쳐지는 숫자
}

message S_MergeItem                              //14
{
    bool isSuccess            = 1;    //성공 유무

    PS_ItemInfo mergedItem    = 2;    // 합쳐지는 아이템 기준
    PS_ItemInfo combinedItem  = 3;    // 합치기위한 아이템
}

message C_DevideItem                              //15
{
    int32 totalItemId       = 1;    // 나눠지는 아이템 기준
    int32 GridX             = 2;    // 나눠진 아이템의 위치X
    int32 GridY             = 3;    // 나눠진 아이템의 위치Y
    int32 rotation          = 4;    // 나눠진 아이템의 회전값
    int32 devideNumber      = 5;    // 나눠지는 숫자
}

message S_DevideItem                              //16
{
    bool isSuccess        = 1;   //성공 유무

    PS_ItemInfo totalItem  = 2;    // 나눠지는 아이템 기준
    PS_ItemInfo newItem  = 3;    // 나눠진 아이템
}

message C_MoveItem                              //17
{
    int32 targetObjectId  = 1;    // 박스 아이디
    PS_ItemInfo moveItem  = 2;    // 옮긴 아이템의 데이터
    int32 GridX           = 3;    //인벤 위치X
    int32 GridY           = 4;    //인벤 위치Y
}

message S_MoveItem                              //13
{
    bool isSuccess        = 1;   //성공 유무

    int32 targetObjectId  = 2;   // 박스 아이디
    PS_ItemInfo moveItem  = 3;   // 옮긴 아이템의 데이터

    int32 GridX           = 4;    //인벤 위치X
    int32 GridY           = 5;    //인벤 위치Y
}

message C_DeleteItem{                           //15
    int32 deleteItemId = 1; //지우려고 하는 아이템의 데이터
}

message S_DeleteItem{                           //16
    bool isSuccess = 1;         //성공 유무
    PS_ItemInfo deleteItem = 2; //지운 아이템의 데이터
}

////////////////////////////////////////////
//                                        //
//                 ????                   //
//                                        //
////////////////////////////////////////////

message C_RaycastShoot{ //16
    float StartPosX = 1;
    float StartPosY = 2;
    float DirX = 3;
    float DirY = 4;
    float Length = 5;
    
}


message S_RaycastHit // 17
{
    int32 RayId = 1;
    int32 hitObjectId = 2;
    //Shape Collider;
    //GameObject hitObj;
    float distance = 3;
    //Vector2 normal;
    float hitPointX = 4;
    float hitPointY = 5;
}



message S_ExitGame {  //18
  int32 playerId = 1;
  int32 exitId = 2;
}

message C_ExitGame{   //19
   int32 playerId = 1;
   int32 exitId = 2;
}




//--------------- END message --------------------

//--------------- INFO -------------------- 기생하는 친구들
message ObjectInfo{
    int32 ObjectId = 1;
    int32 ownerId = 2;
    int32 skillId = 3; //This object is PROJECTILE
    string name = 4;
    PositionInfo positionInfo = 5;
    StatInfo statInfo = 6;
    ShapeInfo shape = 7;
    //CreatureState state = 7;
}

message StatInfo{
  int32 class = 1;
  int32 hp = 2;
  int32 maxHp = 3;
  float attackRange = 4;
  float attackSpeed = 5;
}


message PositionInfo{
  int32 currentRoomId = 1;
  float dirX = 2;
  float dirY = 3;
  float posX = 4;
  float posY = 5;
  float rotZ = 6;
}


// Caustion : must sync Collision.Shapes.Shape.ShapeType Enum
message ShapeInfo{
    ShapeType ShpapeType    = 1;
    float PosX          = 2;
    float PosY          = 3;
    float Roatation     = 4;
    float Radius        = 5;// circle;
    float Left           = 6;//Rectangle
    float Bottom          = 7;//Rectangle
    float Width         = 8;//Rectangle
    float Height        = 9;//Rectangle
}

message PS_ItemInfo{
    int32       objectId                    = 1;        // 해당 아이템의 고유한 아이디
    int32       itemId                      = 2;        // 아이템의 종류(해당 아이템을 DB에서 조회하기 위한 코드)
    int32       x                           = 3;        // 아이템의 그리드 안 좌표상의 X위치
    int32       y                           = 4;        // 아이템의 그리드 안 좌표상의 Y위치
    int32       rotate                      = 5;        // 아이템의 회전코드(rotate * 90)
    int32       amount                      = 6;        // 아이템의 개수(소모품만 64개까지)
    bool        isSearched                  = 7;        // 플레이어가 해당 아이템을 조회하였는지
}
//--------------- END INFO ----------------